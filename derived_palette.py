import png
import colorsys
from collections import OrderedDict

#bathy = png.Reader('bathymetry.png').asRGB()[2]
#
##### DEFINE A COLOR PALETTE MAPPING
#colors = set()
#popcolors = set()
#for n in range(1800):
#    bline = next(bathy)
#    for i in range(3600):
#        base = i*3
#        cstring = str(bline[base]) + "," + str(bline[base+1]) + "," + str(bline[base+2])
#        if cstring != '0,0,0':
#            colors.add(cstring)

colors = {'208,226,242', '235,244,251', '40,120,185', '76,153,202', '223,236,247', '126,185,218', '8,76,148', '212,229,244', '181,212,233', '24,101,172', '16,91,164', '219,233,246', '171,207,229', '187,214,235', '62,142,196', '197,218,239', '11,85,159', '110,176,215', '17,93,165', '8,71,142', '115,178,216', '215,231,245', '218,232,246', '230,240,250', '237,245,252', '13,88,161', '56,136,193', '245,250,255', '10,83,158', '240,247,253', '89,162,207', '227,239,249', '158,202,225', '200,220,240', '134,189,220', '8,53,115', '33,113,181', '8,62,128', '8,61,126', '241,247,253', '8,55,118', '150,198,223', '227,238,249', '14,89,162', '205,224,241', '246,251,255', '60,140,195', '18,94,166', '113,178,215', '47,127,188', '13,87,161', '17,92,165', '204,223,241', '221,235,247', '90,163,208', '163,204,227', '84,158,205', '67,147,199', '66,146,198', '19,95,167', '65,145,197', '8,58,121', '164,205,227', '21,97,169', '228,239,249', '166,205,228', '224,236,248', '242,248,253', '179,211,232', '53,133,191', '118,180,216', '224,237,248', '23,100,171', '191,216,236', '139,192,221', '45,125,187', '39,119,184', '29,108,177', '213,229,244', '202,222,240', '36,116,183', '98,168,211', '85,159,206', '38,118,184', '174,209,231', '186,214,235', '207,225,242', '8,80,154', '123,183,217', '189,215,236', '28,107,176', '27,105,175', '188,215,236', '121,182,217', '168,206,229', '222,235,247', '231,241,250', '203,223,241', '144,194,222', '200,221,240', '54,134,192', '95,166,210', '235,243,251', '64,144,197', '128,185,218', '184,213,234', '87,160,206', '8,74,145', '225,237,248', '201,221,240', '232,242,250', '52,132,191', '177,210,232', '61,141,195', '58,138,194', '233,242,251', '244,249,254', '178,211,232', '159,203,225', '215,230,245', '220,234,246', '133,188,220', '238,246,252', '142,193,222', '30,109,178', '8,78,151', '245,250,254', '104,172,213', '42,122,186', '155,200,224', '209,226,243', '147,196,223', '69,148,199', '212,228,244', '239,246,253', '206,224,242', '107,174,214', '183,213,234', '199,220,239', '238,245,252', '218,233,246', '8,66,134', '92,164,208', '22,99,170', '193,217,237', '8,75,147', '153,199,224', '8,77,150', '129,186,219', '8,67,135', '125,184,218', '8,57,120', '242,248,254', '112,177,215', '217,232,245', '79,155,203', '8,49,109', '9,82,157', '97,167,210', '37,117,183', '8,79,153', '8,54,116', '137,191,221', '51,131,190', '236,244,252', '50,130,190', '10,84,158', '20,96,168', '25,103,173', '93,164,209', '12,86,160', '8,48,107', '8,81,156', '210,227,243', '41,121,185', '221,234,247', '8,69,139', '44,124,187', '148,197,223', '63,143,196', '8,59,123', '8,50,110', '226,238,248', '101,170,212', '161,203,226', '209,227,243', '78,154,203', '26,104,174', '15,90,163', '8,52,113', '106,173,214', '71,150,200', '216,231,245', '80,156,204', '173,208,230', '214,230,244', '83,157,205', '243,249,254', '21,98,169', '57,137,193', '176,209,231', '172,208,230', '145,195,222', '70,149,200', '59,139,194', '55,135,192', '8,65,132', '136,190,220', '211,228,243', '32,112,180', '8,63,129', '120,181,217', '8,51,112', '81,157,204', '8,60,124', '88,161,207', '102,171,212', '75,152,202', '198,219,239', '28,106,176', '8,68,137', '117,179,216', '8,70,140', '35,115,182', '8,72,143', '156,201,225', '234,243,251', '24,102,172', '46,126,188', '203,222,241', '99,169,211', '152,199,224', '196,218,238', '182,212,233', '131,187,219', '72,150,201', '31,110,179', '192,216,237', '31,111,179', '94,165,209', '194,217,238', '103,171,213', '140,192,221', '162,204,226', '43,123,186', '167,206,228', '74,151,201', '169,207,229', '206,225,242', '229,240,249', '8,64,131', '34,114,182', '48,128,189', '109,175,214'}

print(colors)

print(len(colors))

megapalette = []
sat = []
opalette = OrderedDict()
for color in colors:
    rgb = [int(x) for x in color.split(",")]
    hls = list(colorsys.rgb_to_hls(*[x / 256 for x in rgb]))
    sat.append(hls[2])
    #hls_dark = [hls[0], hls[1] * 0.85, hls[2]]
    hls_dark = [hls[0], hls[1] * 0.8, hls[2] if hls[1] < .5 else hls[2] * .75]
    rgb_dark = [int(x * 256) for x in colorsys.hls_to_rgb(*hls_dark)]

    opalette[color] = [rgb, hls, rgb_dark]

    megapalette.append( rgb + hls + hls_dark + rgb_dark)

print(max(sat))

ordered_palette = sorted(megapalette, key=lambda x: x[4])
#ordered_palette = sorted(twopalette, key=lambda x: x[1])


orig = []
new = []
for c in ordered_palette:
    print(c[3],c[4],c[5])
    orig.extend([c[0],c[1],c[2]])
    new.extend([c[9],c[10],c[11]])

image = []
image.extend([orig for i in range(25)])
image.extend([new for i in range(25)])

png.from_array(image, 'RGB').save('transpalette.png')
